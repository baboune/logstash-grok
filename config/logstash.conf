input {
  #file {
  #  path => "/vagrant/logs/nova.log"
  #  type => "openstacklog"
  #  start_position => "beginning"
  #  sincedb_path => "/dev/null"
  #}
  #file {
  #  path => "/vagrant/logs/nova.log"
  #  type => "openstacklog"
  #  start_position => "beginning"
  #  sincedb_path => "/dev/null"
  #}
  #file {
  #  path => "/vagrant/logs/ceilometer.json"
  #  type => "ceilometer"
  #  codec => "json"
  #  start_position => "beginning"
  #  sincedb_path => "/vagrant/.sincedb"
  #}
  file {
    path => "/vagrant/logs/syslog"
    type => "syslog"
    start_position => "beginning"
    sincedb_path => "/vagrant/.sincedb"
  }
}

filter {
  if [type] == "syslog" {
    grok {
      # default syslog pattern %{SYSLOGTIMESTAMP:syslog_timestamp}
      # surround a pattern with ()? to make it optional -- for example (%{NUMBER:requestId})?
      # One of (?:%{IPV6}|%{IPV4})
      match => { 
        "message" => "(\<%{POSINT:prio}\>)?(?:%{TIMESTAMP_ISO8601:syslog_timestamp}|%{SYSLOGTIMESTAMP:syslog_timestamp}) %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(:)?(\[%{POSINT:syslog_pid}\])? %{GREEDYDATA:syslog_message}" 
      }     
    }
    date {
      match => [ "syslog_timestamp", "YYYY-MM-dd'T'HH:mm:ss.SSSSSSZ", "YYYY-MM-dd HH:mm:ss.SSSSSSZ", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"]
    }
  } 
  else if [type] == "openstacklog" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:openstacklog_timestamp} %{GREEDYDATA:openstacklog_message}" }
      add_field => [ "received_at", "%{@timestamp}" ]      
    }
    date {
      match => [ "openstacklog_timestamp", "YYYY-MM-dd HH:mm:ss,SSS", "YYYY-MM-dd HH:mm:ss.SSSSSS", "YYYY-MM-dd HH:mm:ss.SSS", "MMM dd HH:mm:ss", "MMM  d HH:mm:ss"]
    }
  } else if [type] == "ceilometer" {
    grok {
      match => { "timestamp" => "%{TIMESTAMP_ISO8601:ceilometer_timestamp}" }
    }
    date {
      match => [ "ceilometer_timestamp", "YYYY-MM-dd'T'HH:mm:ssZ", "YYYY-MM-dd HH:mm:ss.SSSSSSZ",  "YYYY-MM-dd'T'HH:mm:ss.SSSSSSZ", "YYYY-MM-dd HH:mm:ss.SSSSSS"]
    }
  }
}

output {
#  kafka {
#    broker_list => "kafka-01-sics:6667,kafka-02-sics:6667,kafka-03-sics:6667"
#    codec => "json"
#    topic_id =>  "cmc-infra-monitoring"   
#  }
  stdout {
    codec => rubydebug
  }
  file {
    path => "/vagrant/output/debug.json"
    codec => "json"
  }
  
}

